Input Format
All the programs will read the description of a matrix chain multiplication problem from standard input. The input will start with a value, n, the number of matrices in the chain. This will be followed by n + 1 integers, p0 ...pn giving the dimensions of each matrix in the chain. Matrix Mi (for 1 ≤ i ≤ n) will be pi−1 rows tall and pi columns wide. Values are separated by whitespace, and the p0 ...pn sequence may be split across several lines to make it easier to look at in a text editor. The following shows sample input, input-1.txt. This describes the product of 8 matrices. The ﬁrst matrix is 8×10, the next one is 10×4, the next is 4×9 and so on. 8 8 10 4 9 1 3 5 9 4 All the matrix dimensions will be between 1 and 104, inclusive. This will let us consider large matrix chain multiplication problems, where it might be very important to spend a little extra time to ﬁgure out the best way to compute the product before staring to actually multiply matrices. Note that the matrix dimensions will ﬁt in a signed, 32-bit integer, but the total cost of multiplying the matrices will need a wider type. Use a signed 64-bit integer for this (the long type in Java and C and C++ on an EOS Linux machine).

Naive Strategy
Your naive program will compute and report the cost of multiplying the matrix chain left-to-right. So, it will assume matrix M1 will be multiplied by M2. Then, that result will be multiplied by M3, that result will be multiplied by M4 and so on.
Greedy Strategy
your greedy program will use a recursive, greedy approach for deciding how to compute intermediate matrix products. At the top-level call, it will decide the last multiplication operation to perform. It will do this by ﬁnding the value k that minimizes the cost of multiplying the result of M1·M2·...Mk times the result of Mk+1·Mk+2·...Mn. So, it’s just trying to minimize the cost of this last multiply operation, without (yet) considering the cost of computing the product on the left (M1·M2·...Mk) or the product on the right (Mk+1 ·Mk+2 ·...Mn). Once the greedy algorithm has chosen the value of k that minimizes this cost, it will make recursive calls to determine how to compute the product on the left, M1·M2·...Mk and how to compute the product on the right, Mk+1 ·Mk+2 ·...Mn. These recursive calls will continue down to a base case of just one matrix. Note that this greedy algorithm might give us a fairly good strategy for multiplying a particular chain of matrices, but, in general, it’s not guaranteed to be optimal. You can see this from the ﬁrst sample input. Recursively choosing how to multiply the chain like this isn’t good example of a greedy algorithm. It’s not guaranteed to give us an optimal solution, and even after choosing a value of k. Also, after greedily choosing a value for k, we still have two subproblems to solve.
DP Strategy
Your dp program will will implement the dynamic programming technique for matrix chain multiplication discussed in class and in the textbook. This should give an optimal cost for multiplying the chain of matrices. If it’s helpful in debugging your solution, there’s a YouTube video showing the dynamic programming solution on input-1.txt. It shows how each subproblem is being solved as the algorithm works its way from smaller problem instances to larger ones. 

Naive Strategy 
import java.io.*; import java.util.ArrayList; import java.util.Scanner; 
 
public class naive {    public static Long MultiplyMatrices(ArrayList<Integer> matrixDimData) {   Long numOfMultiplications = (long)0;   while (matrixDimData.size() != 2) {    Long val1 = (long)matrixDimData.get(0); Long val2 = (long)matrixDimData.get(1); Long val3 = (long)matrixDimData.get(2);    Long loopVal1 = Math.multiplyExact(val1, val2); Long loopVal2 = Math.multiplyExact(loopVal1, val3);    numOfMultiplications = Math.addExact(numOfMultiplications, loopVal2);    matrixDimData.remove(1);   }   return numOfMultiplications;  } 
 
 public static void main(String[] args) throws IOException {   // TODO Auto-generated method stub   long startTime = System.currentTimeMillis();   int numOfMatrices = 0;   int fileLine = 1;   ArrayList<Integer> matrixDimData = new ArrayList<Integer>();   String line = new String();   Scanner sc = new Scanner(System.in);   while(true) {    try {     line = sc.nextLine();     if(line.length() == 0)      break;     if (fileLine == 1) {     if (line.length() == 0) {      System.out.println("Invalid input format.");      break;     }     else {      numOfMatrices = Integer.parseInt(line);     }     fileLine++;     }     else { 
     if (line.length() == 0) {       break;      }      else {       String[] strArr = line.split(" ");       for (int i = 0; i < strArr.length; i++) {        matrixDimData.add(Integer.parseInt(strArr[i]));       }      }     }    }    catch(Exception e) {     break;    }   }   sc.close();   if (matrixDimData.size() != numOfMatrices+1) {    System.out.println("Input format inavlid");   }   else {    Long numOfMultiplications = MultiplyMatrices(matrixDimData);    System.out.println(numOfMultiplications);   }   long endTime = System.currentTimeMillis();   System.out.println(endTime - startTime+ " milliseconds");  } 
 
} 
 
Greedy Strategy 
import java.math.BigInteger; import java.util.Scanner; 
 
public class greedy {  static boolean debug = false;   public static BigInteger greedyCalcCost(int start, int end, int[] array) {   BigInteger cost = BigInteger.ZERO;   //BigInteger min  = BigInteger.valueOf(100000000);   if(end == start+1) {    return cost;   }   BigInteger min = BigInteger.valueOf(array[start]).multiply(BigInteger.valueOf(array[sta rt+1])).multiply(BigInteger.valueOf(array[end]));   int k = -1;   for(int i = start+1; i< end; i++) {    if(BigInteger.valueOf(array[start]).multiply(BigInteger.valueOf(a rray[i])).multiply(BigInteger.valueOf(array[end])).max(min).equals(min )) {     k = i;     min = BigInteger.valueOf(array[start]).multiply(BigInteger.valueOf(array[i]) ).multiply(BigInteger.valueOf(array[end]));    }   } 
 
  if(debug)    System.out.println(min);   if(debug)    System.out.println("DEBUG: start: "+start+"; end: "+end+"; k: "+k);   cost = min.add(greedyCalcCost(start, k, array)).add(greedyCalcCost(k, end, array));   return cost;  } 
 
 public static void main(String[] args) {   Scanner sc =  new Scanner(System.in);   int num = sc.nextInt();   int[] arr = new int[num+1];   for(int i=0; i<= num; i++) {    arr[i] = sc.nextInt();   }      System.out.println(greedyCalcCost(0, num, arr).toString());  } 
 
} 

DP Strategy 
import java.io.IOException; import java.util.Scanner; 
 
public class dp {    public static Long MultiplyMatrices(int[] matrixDimData) {   Long dpTable[][] = new Long[matrixDimData.length][matrixDimData.length];     for (int i = 1; i < matrixDimData.length; i++) {    dpTable[i][i] = (long) 0;   }   for (int i = matrixDimData.length - 1; i >= 1; i--) {    for (int j = i + 1; j < matrixDimData.length; j++) {     Long minCost = Long.MAX_VALUE;      for (int k = i; k < j; k++) {      Long dimensionCost1 = (long) Math.multiplyExact(matrixDimData[i-1], matrixDimData[k]); Long dimensionCost2 = (long) Math.multiplyExact(dimensionCost1, matrixDimData[j]);      Long currentCost1 = Math.addExact(dpTable[i][k], dpTable[k+1][j]); Long currentCost2 = Math.addExact(currentCost1, dimensionCost2);      minCost = Math.min(minCost, currentCost2);     }     dpTable[i][j] = minCost;    }   }   return dpTable[1][matrixDimData.length-1];  } 
 
 public static void main(String[] args) throws NumberFormatException, IOException {   // TODO Auto-generated method stub   long startTime = System.currentTimeMillis();      Scanner sc =  new Scanner(System.in);   int numOfMatrices = sc.nextInt();   int[] matrixDimData = new int[numOfMatrices+1];   for(int i=0; i<= numOfMatrices; i++) {    matrixDimData[i] = sc.nextInt();   }   sc.close();   System.out.println(MultiplyMatrices(matrixDimData));   long endTime = System.currentTimeMillis();   System.out.println(endTime - startTime+ " milliseconds");  }   } 
 
 
